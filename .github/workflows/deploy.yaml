name: Deploy

on:
  workflow_dispatch:
    inputs:
      force_bump:
        description: 'Force creation of a new tag when running manually'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'patch'
          - 'minor'
          - 'major'
      custom_tag:
        description: 'Optional explicit tag to create (e.g., v0.3.0). When set, overrides force_bump.'
        required: false
        default: ''
        type: string
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.github/**'

jobs:
  tag:
    name: Create tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@a22cf08638b34d5badda920f9daf6e72c477b07b # v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.custom_tag == '' && github.event.inputs.force_bump != 'false' && github.event.inputs.force_bump || 'false' }}
          custom_tag: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.custom_tag != '' && github.event.inputs.custom_tag || '' }}

  build_ubuntu:
    name: Build Linux and Windows
    needs: tag
    if: ${{ needs.tag.outputs.new_tag != '' && needs.tag.outputs.new_tag != null }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl,x86_64-pc-windows-gnu

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools mingw-w64

      - name: Build Linux binary
        run: |
          cargo build --release --target x86_64-unknown-linux-musl
          mkdir -p dist
          cp target/x86_64-unknown-linux-musl/release/cleaner dist/cleaner-linux-x64
          cd dist
          tar -cJf cleaner-linux-x64.tar.xz cleaner-linux-x64
          sha256sum cleaner-linux-x64.tar.xz > cleaner-linux-x64.tar.xz.sha256

      - name: Build Windows binary
        run: |
          cargo build --release --target x86_64-pc-windows-gnu
          mkdir -p dist
          cp target/x86_64-pc-windows-gnu/release/cleaner.exe dist/cleaner-windows-x64.exe
          cd dist
          zip cleaner-windows-x64.zip cleaner-windows-x64.exe
          sha256sum cleaner-windows-x64.zip > cleaner-windows-x64.zip.sha256

      - name: Upload Ubuntu artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: ubuntu-artifacts
          path: |
            dist/cleaner-linux-x64.tar.xz
            dist/cleaner-linux-x64.tar.xz.sha256
            dist/cleaner-windows-x64.zip
            dist/cleaner-windows-x64.zip.sha256

  build_macos:
    name: Build macOS (Apple Silicon)
    needs: tag
    if: ${{ needs.tag.outputs.new_tag != '' && needs.tag.outputs.new_tag != null }}
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build macOS Apple Silicon binary
        run: |
          cargo build --release --target aarch64-apple-darwin
          mkdir -p dist
          cp target/aarch64-apple-darwin/release/cleaner dist/cleaner-macos-arm64
          cd dist
          zip cleaner-macos-arm64.zip cleaner-macos-arm64
          shasum -a 256 cleaner-macos-arm64.zip > cleaner-macos-arm64.zip.sha256

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: macos-artifacts
          path: |
            dist/cleaner-macos-arm64.zip
            dist/cleaner-macos-arm64.zip.sha256

  release:
    name: Create GitHub Release
    needs: [tag, build_ubuntu, build_macos]
    if: ${{ needs.tag.outputs.new_tag != '' && needs.tag.outputs.new_tag != null }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: ubuntu-artifacts
          path: dist

      - name: Download macOS artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: macos-artifacts
          path: dist

      - name: Create Release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          makeLatest: true
          tag: ${{ needs.tag.outputs.new_tag }}
          name: ${{ needs.tag.outputs.new_tag }}
          body: ${{ needs.tag.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "dist/*"
